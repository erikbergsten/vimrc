export PS1='\W ยง '
export HELM_DIFF_COLOR=true

alias l='ls -la'
alias r='source ~/.bashrc'

if command -v kubectl &> /dev/null
then

alias kctl='kubectl'
source <(kubectl completion bash)
complete -o default -F __start_kubectl kctl

fi

if command -v podman &> /dev/null
then
export DOCKER_HOST=unix:///run/user/${UID}/podman/podman.sock
fi

alias watch='watch '
alias watch10='watch -n10 '
alias watch60='watch -n60 '
alias watch300='watch -n300 '

export EDITOR=vim
if command -v nvim &> /dev/null
then
alias vim='nvim'
export EDITOR=nvim
fi

NODE_IMAGE=node:18.10.0-alpine3.15

nodejs () {
  podman run -it --rm -v `pwd`:/app:z -w /app --network host --entrypoint $1 $NODE_IMAGE ${@:2}
}

deactivate () {
  unset nodejs
  unalias npm
  unalias node
  unalias npx
}

alias npm='nodejs npm'
alias node='nodejs node'
alias npx='nodejs npx'

KAFKA_IMAGE=bitnami/kafka:latest

kraft() {
  podman run --network host --name kraft --rm -d \
    -e KAFKA_ENABLE_KRAFT=yes \
    -e KAFKA_CFG_PROCESS_ROLES=broker,controller \
    -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \
    -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \
    -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \
    -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 \
    -e KAFKA_BROKER_ID=1 \
    -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093 \
    -e ALLOW_PLAINTEXT_LISTENER=yes \
    -e KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS=250 \
     $KAFKA_IMAGE
}

kcat() {
  podman run -it --rm --network host -v `pwd`:/home/appuser:z confluentinc/cp-kafkacat kafkacat $@
}

ksql-server() {
  podman run --network host --name ksql-server --rm -it \
    -e KSQL_LISTENERS=http://0.0.0.0:8088 \
    -e KSQL_BOOTSTRAP_SERVERS=localhost:9092 \
    -e KSQL_KSQL_LOGGING_PROCCESSING_STREAM_AUTO_CREATE="true" \
    -e KSQL_KSQL_LOGGING_PROCCESSING_TOPIC_AUTO_CREATE="true" \
    confluentinc/ksqldb-server:0.28.2
}

ksql-cli() {
  podman run --network host --name ksql-cli --rm -it \
    --entrypoint ksql \
    confluentinc/ksqldb-cli:0.28.2
}

azr_push() {
  REGISTRY=$(echo $1 | cut -d '.' -f1)
  TOKEN=$(az acr login \
    --name $REGISTRY \
    --expose-token \
    -o tsv \
    --query accessToken)
  podman push $1 --creds 00000000-0000-0000-0000-000000000000:$TOKEN
}

alias pandabroker="podman ps | grep redpanda | sed  's/.*0.0.0.0:\(.*\)-.*/localhost:\1/g'"

mermaid() {
  podman run -it -v `pwd`:/data:z --user 0 minlag/mermaid-cli -i /data/$1
}
